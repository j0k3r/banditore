name: "CI"

on:
  pull_request:
    branches:
      - "master"
  push:
    branches:
      - "master"

env:
  fail-fast: true
  APP_ENV: test

jobs:
  phpunit:
    name: "PHPUnit (PHP ${{ matrix.php }})"
    runs-on: "ubuntu-20.04"
    services:
      rabbitmq:
        image: rabbitmq:3-alpine
        ports:
          - 5672:5672
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379

    strategy:
      matrix:
        php:
          - "7.2"
          - "7.3"
          - "7.4"
        include:
          - php: "7.2"
            coverage: true

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP with PCOV"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php }}"
          coverage: "pcov"
          tools: composer:v1
          extensions: pdo, pdo_mysql, curl, redis
          ini-values: "date.timezone=Europe/Paris"
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Setup MySQL"
        run: |
          sudo systemctl start mysql.service
          sudo mysql -u root -proot -e "CREATE DATABASE banditore_test"

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: "php-${{ matrix.php }}-composer-locked-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php }}-composer-locked-"

      - name: "Install dependencies with composer"
        run: "composer install --no-interaction --optimize-autoloader --no-progress --prefer-dist"

      - name: "Create schema"
        run: "php bin/console doctrine:schema:create --env=test"

      - name: "Load fixtures"
        run: "php bin/console doctrine:fixtures:load --env=test -n"

      - name: "Setup messenger queue"
        run: "php bin/console messenger:setup-transports --env=dev"

      - name: "Run PHPUnit (with coverage)"
        run: "php bin/simple-phpunit -v --coverage-clover=coverage.xml"
        if: matrix.coverage

      - name: "Run PHPUnit"
        run: "php bin/simple-phpunit -v"
        if: "${{ !matrix.coverage }}"

      - name: "Retrieve Coveralls phar"
        if: matrix.coverage
        run: "wget https://github.com/php-coveralls/php-coveralls/releases/download/v2.4.2/php-coveralls.phar"

      - name: "Enable Coveralls phar"
        if: matrix.coverage
        run: "chmod +x php-coveralls.phar"

      - name: "Upload to Coveralls"
        if: matrix.coverage
        run: "php php-coveralls.phar -v -x coverage.xml -o coveralls-upload.json"
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
